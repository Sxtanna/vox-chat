plugins {
	id 'idea'
	id 'java-library'
	id 'com.github.johnrengelman.shadow' version '6.0.0'
}


group 'com.sxtanna.mc'
version '0.5.0'


repositories {
	maven {
		url = uri("https://papermc.io/repo/repository/maven-public/")
	}
	maven {
		url = uri("https://repo.extendedclip.com/content/repositories/placeholderapi/")
	}
	// broken repo
	/*maven {
		url = uri("https://repo.mvdw-software.com/content/groups/public/")
	}*/
	
	mavenLocal() /* todo: remove once his repo is back online*/
	mavenCentral()
}

dependencies {
	implementation "com.atlassian.commonmark:commonmark:0.15.2"
	
	compileOnly "org.jetbrains:annotations:20.1.0"
	compileOnly "org.spigotmc:spigot-api:1.16.1-R0.1-SNAPSHOT"
	
	compileOnly("me.clip:placeholderapi:2.10.9") {
		transitive = false
	}
	compileOnly("be.maximvdw:MVdWPlaceholderAPI:3.1.1-SNAPSHOT") {
		transitive = false
	}
}


tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

java {
	withJavadocJar()
	withSourcesJar()
}

idea {
	module.downloadJavadoc = true
	module.downloadSources = true
}

sourceSets {
	test.compileClasspath += configurations.compileOnly
	test.runtimeClasspath += configurations.compileOnly
}

shadowJar {
	archiveClassifier.set("")
	
	minimize()
	
	relocate "org.commonmark", "com.sxtanna.mc.chat.libs"
}


processResources {
	from(sourceSets.main.resources.srcDirs) {
		filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
				pluginName: project.properties["pluginName"],
				pluginMain: project.properties["pluginMain"],
				
				pluginVersion: project.properties["pluginVersion"],
				pluginWebsite: project.properties["pluginWebsite"],
				
				pluginAuthors: project.properties["pluginAuthors"],
		]
	}
}


task copyToServerDir(type: Copy) {
	from shadowJar
	into "${rootProject.rootDir.parent}\\server\\plugins"
}